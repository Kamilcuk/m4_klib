#!/usr/bin/env python3

import argparse
import re
import sys
from pathlib import Path
from typing import Callable, Dict


def get_line_number_of_bytes_position(txt: str, pos: int) -> int:
    cnt = 0
    for cnt, line in enumerate(txt.splitlines()):
        pos -= len(line)
        if pos < 0:
            break
    return cnt + 1


def main():
    parser = argparse.ArgumentParser(
        description="""
        Parse m4 files and extract function definitions.
        """
    )
    parser.add_argument("-f", "--format", choices="debug tags doxygen", default="debug")
    parser.add_argument(
        "-d",
        "--dir",
        default=Path(__file__).parent,
        type=Path,
        help="Directory to scan for m4 files",
    )
    parser.add_argument("-o", "--output", type=Path)
    parser.add_argument("files", nargs="*", type=Path)
    args = parser.parse_args()
    rgx = re.compile(
        r"""
        \n
        (?P<comment>/[*][*](?:(?![*]/).)*?[*]/\n)?
        (?P<define>[#][ \t]*define[ \t]*[^\n]*\n)*
        m4_define\w*\(\s*«?
        (?P<func>\w+)
        (?P<args>\([^\)]*\))?
        [^\n]*
        """,
        re.VERBOSE | re.DOTALL,
    )
    if args.output:
        sys.stdout = args.output.open("w")
    tags = []
    for file in args.files or Path(".").rglob("*.m4"):
        data = Path(file).read_text()
        if args.format == "doxygen":
            print(
                rgx.sub(
                    lambda m: (
                        f"\n{m['comment'] or ''}#define {m['func']}{m['args'] or '(...)'}"
                        if m["func"]
                        else m[0]
                    ),
                    data,
                )
            )
        elif args.format == "tags":
            for m in rgx.finditer(data):
                func = m["func"]
                if func:
                    tag = (
                        f"{func}\t{file}\t"
                        # rf"""/\m^\s*m4_define\w*(\_s*[`«]\?{func}\>/|call cursor(0,stridx(getline('.'), '{func}')+1)"""
                        rf"""call search('\m^\s*m4_define\w*(\_s*[`«]\?{func}\>')|call search('{func}\>')"""
                    )
                    # print(f"{func}\t{file}\t" rf"/\m^m4_define\w*(\_s*«\?\zs{func}\>/e-{len(func)};")
                    # line = get_line_number_of_bytes_position(data, m.start('func'))
                    # print(f"{func}\t{file}\t{line};?{func}?")
                    tags.append(tag)
        elif args.format == "debug":
            for m in rgx.finditer(data):
                print(file, m)
        else:
            assert 0
    if args.format == "tags":
        tags.sort()
        print(f"!_TAG_FILE_SORTED\t1\tThis file was generated by {__file__}")
        print(f"!_TAG_FILE_ENCODING\tutf-8\tThis file was generated by {__file__}")
        print("\n".join(tags))
        print(f"Found {len(tags)} tags", file=sys.stderr)


main()
